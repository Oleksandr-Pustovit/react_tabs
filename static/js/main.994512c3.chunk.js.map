{"version":3,"sources":["components/Tabs/Tabs.tsx","App.tsx","index.tsx"],"names":["Tabs","tabs","selectedTabId","onTabSelect","length","className","map","tab","classNames","id","href","onClick","tabId","selectedId","includes","shouldUpdate","title","find","content","tabsFromServer","App","useState","setTabs","selectedTab","setSelectedTab","useEffect","ReactDOM","render","document","getElementById"],"mappings":"uLASaA,EAAwB,SAAC,GAI/B,IAAD,EAHJC,EAGI,EAHJA,KACAC,EAEI,EAFJA,cACAC,EACI,EADJA,YAcA,OAAoB,IAAhBF,EAAKG,OAEL,6BAKF,gCACE,qBAAKC,UAAU,gBAAf,SACE,6BACGJ,EAAKK,KAAI,SAAAC,GAAG,OACX,oBACEF,UAAWG,IAAW,CAAE,YAAaD,EAAIE,KAAOP,IADlD,SAIE,mBACEQ,KAAI,WAAMH,EAAIE,IACdE,QAAS,kBA7BF,SAACC,GACpB,IAAIC,EAAaD,EAEZX,EAAKK,KAAI,SAAAC,GAAG,OAAIA,EAAIE,MAAIK,SAASD,KACpCA,EAAaZ,EAAK,GAAGQ,IAGnBP,IAAkBW,GACpBV,EAAYU,GAqBaE,CAAaR,EAAIE,KAFlC,SAIGF,EAAIS,SANFT,EAAIE,WAajB,qBAAKJ,UAAU,QAAQ,UAAQ,cAA/B,UACG,UAAAJ,EAAKgB,MAAK,SAAAV,GAAG,OAAIA,EAAIE,KAAOP,YAA5B,eAA4CgB,UACxC,0BChDAC,EAAiB,CAC5B,CAAEV,GAAI,QAASO,MAAO,QAASE,QAAS,eACxC,CAAET,GAAI,QAASO,MAAO,QAASE,QAAS,eACxC,CAAET,GAAI,QAASO,MAAO,QAASE,QAAS,gBAG7BE,EAAgB,WAAO,IAAD,EACjC,EAAwBC,mBAAgB,IAAxC,mBAAOpB,EAAP,KAAaqB,EAAb,KACA,EAAsCD,mBAAS,MAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAUA,OAJAC,qBAAU,WACRH,EAAQH,KACP,IAGD,sBAAKd,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,SACmB,IAAhBJ,EAAKG,OACJ,4DAEG,UAAAH,EAAKgB,MAAK,SAAAV,GAAG,OAAIA,EAAIE,KAAOc,YAA5B,eAA0CP,QACtC,WAGP,0DAMJ,cAAC,EAAD,CACEf,KAAMA,EACNC,cAAeqB,EACfpB,YA3BgB,SAACS,GACrBY,EAAeZ,UCdnBc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.994512c3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Tab } from '../../interfaces/Tab';\n\ninterface Props {\n  tabs: Tab[];\n  selectedTabId: string;\n  onTabSelect: (tabId: string) => void;\n}\n\nexport const Tabs: React.FC<Props> = ({\n  tabs,\n  selectedTabId,\n  onTabSelect,\n}) => {\n  const shouldUpdate = (tabId: string) => {\n    let selectedId = tabId;\n\n    if (!tabs.map(tab => tab.id).includes(selectedId)) {\n      selectedId = tabs[0].id;\n    }\n\n    if (selectedTabId !== selectedId) {\n      onTabSelect(selectedId);\n    }\n  };\n\n  if (tabs.length === 0) {\n    return (\n      <></>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"tabs is-boxed\">\n        <ul>\n          {tabs.map(tab => (\n            <li\n              className={classNames({ 'is-active': tab.id === selectedTabId })}\n              key={tab.id}\n            >\n              <a\n                href={`#${tab.id}`}\n                onClick={() => shouldUpdate(tab.id)}\n              >\n                {tab.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"block\" data-cy=\"tab-content\">\n        {tabs.find(tab => tab.id === selectedTabId)?.content\n          || 'This tab is empty'}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Tabs } from './components/Tabs/Tabs';\nimport { Tab } from './interfaces/Tab';\n\nexport const tabsFromServer = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const App: React.FC = () => {\n  const [tabs, setTabs] = useState<Tab[]>([]);\n  const [selectedTab, setSelectedTab] = useState('-1');\n\n  const onTabSelected = (tabId: string) => {\n    setSelectedTab(tabId);\n  };\n\n  useEffect(() => {\n    setTabs(tabsFromServer);\n  }, []);\n\n  return (\n    <div className=\"section\">\n      <h1 className=\"title\">\n        {tabs.length !== 0 ? (\n          <>\n            Selected tab is&nbsp;\n            {tabs.find(tab => tab.id === selectedTab)?.title\n              || 'empty'}\n          </>\n        ) : (\n          <>\n            There is no tabs\n          </>\n        )}\n      </h1>\n\n      <Tabs\n        tabs={tabs}\n        selectedTabId={selectedTab}\n        onTabSelect={onTabSelected}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}