{"version":3,"sources":["components/Tabs/Tabs.tsx","App.tsx","index.tsx"],"names":["Tabs","tabs","selectedTabId","onTabSelect","className","map","tab","classNames","id","href","onClick","tabId","selectedId","includes","shouldUpdate","title","find","content","App","useState","selectedTab","setSelectedTab","ReactDOM","render","document","getElementById"],"mappings":"uLASaA,EAAwB,SAAC,GAI/B,IAAD,EAHJC,EAGI,EAHJA,KACAC,EAEI,EAFJA,cACAC,EACI,EADJA,YAcA,OACE,gCACE,qBAAKC,UAAU,gBAAf,SACE,6BACGH,EAAKI,KAAI,SAAAC,GAAG,OACX,oBACEF,UAAWG,IAAW,CAAE,YAAaD,EAAIE,KAAON,IADlD,SAIE,mBACEO,KAAI,WAAMH,EAAIE,IACdE,QAAS,kBAvBF,SAACC,GACpB,IAAIC,EAAaD,EAEZV,EAAKI,KAAI,SAAAC,GAAG,OAAIA,EAAIE,MAAIK,SAASD,KACpCA,EAAaX,EAAK,GAAGO,IAGnBN,IAAkBU,GACpBT,EAAYS,GAeaE,CAAaR,EAAIE,KAFlC,SAIGF,EAAIS,SANFT,EAAIE,WAajB,qBAAKJ,UAAU,QAAQ,UAAQ,cAA/B,mBACGH,EAAKe,MAAK,SAAAV,GAAG,OAAIA,EAAIE,KAAON,YAD/B,aACG,EAA4Ce,cC1CxChB,EAAO,CAClB,CAAEO,GAAI,QAASO,MAAO,QAASE,QAAS,eACxC,CAAET,GAAI,QAASO,MAAO,QAASE,QAAS,eACxC,CAAET,GAAI,QAASO,MAAO,QAASE,QAAS,gBAG7BC,EAAgB,WAAO,IAAD,EACjC,EAAsCC,mBAASlB,EAAK,GAAGO,IAAvD,mBAAOY,EAAP,KAAoBC,EAApB,KAMA,OACE,sBAAKjB,UAAU,UAAf,UACE,qBAAIA,UAAU,QAAd,0CAEGH,EAAKe,MAAK,SAAAV,GAAG,OAAIA,EAAIE,KAAOY,YAF/B,aAEG,EAA0CL,SAG7C,cAAC,EAAD,CACEd,KAAMA,EACNC,cAAekB,EACfjB,YAdgB,SAACQ,GACrBU,EAAeV,UCZnBW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.cd42f936.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Tab } from '../../interfaces/Tab';\n\ninterface Props {\n  tabs: Tab[];\n  selectedTabId: string;\n  onTabSelect: (tabId: string) => void;\n}\n\nexport const Tabs: React.FC<Props> = ({\n  tabs,\n  selectedTabId,\n  onTabSelect,\n}) => {\n  const shouldUpdate = (tabId: string) => {\n    let selectedId = tabId;\n\n    if (!tabs.map(tab => tab.id).includes(selectedId)) {\n      selectedId = tabs[0].id;\n    }\n\n    if (selectedTabId !== selectedId) {\n      onTabSelect(selectedId);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"tabs is-boxed\">\n        <ul>\n          {tabs.map(tab => (\n            <li\n              className={classNames({ 'is-active': tab.id === selectedTabId })}\n              key={tab.id}\n            >\n              <a\n                href={`#${tab.id}`}\n                onClick={() => shouldUpdate(tab.id)}\n              >\n                {tab.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"block\" data-cy=\"tab-content\">\n        {tabs.find(tab => tab.id === selectedTabId)?.content}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Tabs } from './components/Tabs/Tabs';\n\nexport const tabs = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const App: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(tabs[0].id);\n\n  const onTabSelected = (tabId: string) => {\n    setSelectedTab(tabId);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1 className=\"title\">\n        Selected tab is&nbsp;\n        {tabs.find(tab => tab.id === selectedTab)?.title}\n      </h1>\n\n      <Tabs\n        tabs={tabs}\n        selectedTabId={selectedTab}\n        onTabSelect={onTabSelected}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}